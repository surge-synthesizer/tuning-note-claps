name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v**'

defaults:
  run:
    shell: bash

jobs:
  build_release:
    name: Build release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: linux
            dir_build: ./build
            file_name: tuning-note-claps.clap
          - os: macos-latest
            name: mac
            dir_build: ./build
          - os: windows-latest
            name: win
            dir_build: ./build/Release
            file_name: tuning-note-claps.clap
    steps:
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: choco install zip

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build binary
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build ./build --config Release

      - name: List files
        run: ls "${{ matrix.dir_build }}"

      - name: Compress binary
        if: runner.os != 'macOS'
        run: |
          pushd "${{ matrix.dir_build }}"
          zip ${{ matrix.zip_arguments }} tuning-note-claps-${{ matrix.name }}-`git rev-parse --short HEAD`.zip ${{ matrix.file_name }}
          ls -l
          pwd
          popd
          mkdir -p build/inst
          cp "${{ matrix.dir_build }}"/*.zip build/inst
          
          ls -l build/inst

      - uses: apple-actions/import-codesign-certs@v3
        if: runner.os == 'macOS' && github.event_name != 'pull_request'
        with:
          p12-file-base64: ${{ secrets.MAC_CERTS_P12 }}
          p12-password: ${{ secrets.CERT_PWD }}

      - name: Make Mac DMG
        if: runner.os == 'macOS'
        run: |
          export MAC_SIGNING_CERT="${{ secrets.MAC_SIGNING_CERT_NAME }}"
          export MAC_INSTALLING_CERT="${{ secrets.MAC_INSTALLING_CERT_NAME }}"
          
          export MAC_SIGNING_ID="${{ secrets.MAC_SIGNING_ID }}"
          export MAC_SIGNING_1UPW="${{ secrets.MAC_SIGNING_1UPW }}"
          export MAC_SIGNING_TEAM="${{ secrets.MAC_SIGNING_TEAM }}"
  
          ./scripts/make_installer_macos.sh tuning-note-claps build `pwd`/scripts/res . `git rev-parse --short HEAD`
          mkdir -p build/inst
          mv *.dmg build/inst
          
          ls -l build/inst

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: build/inst
          name: dawplugin-${{ matrix.name }}


  publish-plugin-nightly:
    name: Publish Nightly
    if: ${{ github.ref == 'refs/heads/main' && github.repository_owner == 'surge-synthesizer' }}
    runs-on: ubuntu-latest
    needs: [build_release]
    steps:
      - name: Upload to Nightly
        uses: surge-synthesizer/sst-githubactions/upload-to-release@main
        with:
          tag: Nightly
          reuse_tag: true
          create_tag: false
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-plugin-release:
    name: Publish Release
    if: startsWith(github.ref, 'refs/tags/v') && github.repository_owner == 'surge-synthesizer'
    runs-on: ubuntu-latest
    needs: [build_release]
    steps:
      - name: Upload to Release
        uses: surge-synthesizer/sst-githubactions/upload-to-release@main
        with:
          tag: ${{ github.ref_name }}
          reuse_tag: false
          create_tag: true
          token: ${{ secrets.GITHUB_TOKEN }}
