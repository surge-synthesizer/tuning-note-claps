name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v**'

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_id: ${{ steps.draft_release.outputs.id }}
      upload_url: ${{ steps.draft_release.outputs.upload_url }}
    steps:
      - name: Draft release
        id: draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true

  build_release:
    name: Build release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: linux
            dir_build: ./build
            file_name: tuning-note-claps.clap
          - os: macos-latest
            name: mac
            dir_build: ./build
          - os: windows-latest
            name: win
            dir_build: ./build/Release
            file_name: tuning-note-claps.clap
    steps:
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: choco install zip

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build binary
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build ./build --config Release

      - name: List files
        run: ls "${{ matrix.dir_build }}"

      - name: Compress binary
        if: runner.os != 'macOS'
        run: |
          cd "${{ matrix.dir_build }}"
          mkdir inst
          zip ${{ matrix.zip_arguments }} inst/${{ matrix.file_name }}-${{ matrix.name }}.zip ${{ matrix.file_name }}${{ matrix.file_ext }}

      - name: Make Mac DMG
        if: runner.os == 'macOS'
        run: |
          export MAC_SIGNING_CERT="${{ secrets.MAC_SIGNING_CERT_NAME }}"
          export MAC_INSTALLING_CERT="${{ secrets.MAC_INSTALLING_CERT_NAME }}"
          
          export MAC_SIGNING_ID="${{ secrets.MAC_SIGNING_ID }}"
          export MAC_SIGNING_1UPW="${{ secrets.MAC_SIGNING_1UPW }}"
          export MAC_SIGNING_TEAM="${{ secrets.MAC_SIGNING_TEAM }}"
  
          ./scripts/make_installer_macos.sh tuning-note-claps build `pwd`/scripts/res . 1.1.0
          mkdir -p build/inst
          mv *.dmg build/inst
          
          ls -l build/inst


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: build/inst
          name: dawplugin-${{ matrix.name }}



  #publish_release:
  #  name: Publish release
  #  needs: [create_release, build_release]
  #  runs-on: ubuntu-latest
  #  steps:
  #  - uses: eregon/publish-release@v1
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      release_id: ${{ needs.create_release.outputs.upload_id }}
